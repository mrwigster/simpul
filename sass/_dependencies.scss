// Basic Mixins / functions
// Not really meant to be edited!
// ---------- MIXIN DEPENDENCIES
@mixin _bd($vert, $horiz, $radius) {
  -webkit-border-#{$vert}-#{$horiz}-radius: $radius;
  -moz-border-radius-#{$vert}#{$horiz}: $radius;
  border-#{$vert}-#{$horiz}-radius: $radius;
}

// _fluidGrid ( number $colCount )
@mixin _fluidGrid($colCount) {
  // override only for fluid
  /* Overrides */
  .container {
    .column,
    .columns {
      margin: {
        left: 1%;
        right: 1%;
      }
    }
  }
  // Grid
  .container {
    @for $i from 1 through $colCount {
      @if ( $i == 1 ) {
        .#{numToString($i)}.column,
        .#{numToString($i)}.columns { width: percentage( $i / $colCount ) - 2; }
      } @else {
        .#{numToString($i)}.columns { width: percentage( $i / $colCount ) - 2; }
      }
    }
    $top: percentage( $colCount / $colCount ) - 2;
    .columns.one-third, .column.one-third { width: $top * (1 / 3) - 2; }
    .columns.two-thirds, .column.two-third { width: $top * (2 / 3) - 2; }
    // Offsets
    @include _offset(true, $colCount, false);
  }
}

// _fixedGrid ( number $width, number $colWidth, number $gutterWidth, number $colCount )
@mixin _fixedGrid($width, $colWidth, $gutterWidth, $colCount) {
  .container {
    .column,
    .columns {
      margin: {
        left: $gutterWidth / 2;
        right: $gutterWidth / 2;
      };
    }
  }
  /* The Grid */
  .container {
    @for $i from 1 through $colCount {
       @if ( $i == 1 ) {
        .#{numToString($i)}.column,
        .#{numToString($i)}.columns { width: $colWidth; }
      } @else {
        .#{numToString($i)}.columns { width: $colWidth + ( ( $colWidth + $gutterWidth ) * ( $i - 1 ) ); }
      }
    }
    .columns.one-third, .column.one-third { width: ( $width / 3 ) - 20}
    .columns.two-thirds, .column.two-third { width: ( ( $width * 2 ) / 3 ) - 20 }
    @include _offset(false, $colCount, $colWidth);
  }
}

// _offset ( bool $isFluid, number $colCount, number $colWidth )
@mixin _offset($isFluid, $colCount, $colWidth) {
  @if ( $isFluid == true ) {
    @for $i from 1 through ( $colCount - 1 ) {
      .offset-by-#{numToString($i)} { margin-left: percentage( $i / $colCount ) - 2; }
    }
  } @else {
    @for $i from 1 through ( $colCount - 1 ) {
      .offset-by-#{numToString($i)} { margin-left: ( $colWidth + 20 ) * $i; }
    }
  }
}

// _mobileGrid ( number $width, number $colCount )
@mixin _mobileGrid($width, $colCount) {
  .container {
    width: $width;
    .column,
    .columns {
      margin: {
        left: 0;
        right: 0;
      };
    }
    @for $i from 1 through $colCount {
      @if ( $i == 1 ) {
        .#{numToString($i)}.column { width: $width; }
      }
    }
    @include _group($colCount, ".columns", "after") { width: $width; }
    .columns.one-third, .column.one-third { width: $width; }
    .columns.two-thirds, .column.two-third { width: $width; }
    @include _mobileOffset($colCount);
  }
}

// _mobileOffset ( number $colCount )
@mixin _mobileOffset($colCount) {
  @include _group($colCount - 1, "offset-by-") { padding-left: 0; }
}

// _group ( number $stop, string $selector, [ string $pos: "before" ] )
@mixin _group($stop, $selector, $pos: "before") {
  $store: "";
  @if(type-of($stop) != "number") {
    @warn "Stop must be a number! #{type-of($stop)} was provided.";
  }
  @if($pos == "after") {
    @for $i from 1 through $stop {
      $store: $store + "." + numToString($i) + $selector + ",";
    }
  } @else {
    @for $i from 1 through $stop {
      $store: $store + "." + $selector + numToString($i) + ",";
    }
  }
  #{$store} {
    @content;
  }
}

// needs multiple stop support
// needs center adjustment support
// _buildRadialGradient ( string $direction, color $start, color $stop, bool $ie )
@mixin _buildRadialGradient($direction, $start, $stop, $ie) {
  $direction: unquote($direction);
  $webkitGradientDirection: null;
  $linearGradientDirection: null;
  @if($direction == radial or $direction == ellipse or $direction == center) {
    background: $start;
    background: -moz-radial-gradient(center, ellipse cover, $start, $stop);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0% #{$start}), color-stop(100% #{$stop}));
    background: -webkit-radial-gradient(center, ellipse cover, $start, $stop);
    background: -o-radial-gradient(center, ellipse cover, $start, $stop);
    background: -ms-radial-gradient(center, ellipse cover, $start, $stop);
    background: radial-gradient(ellipse at center, $start, $stop);
  }
  @if($ie == true) {
    @include filter-gradient($start, $stop, $direction);
  }
}

// needs multiple stop support
// _buildGradient ( string $direction, list $start, list $stop, bool $ie )
@mixin _buildGradient($direction, $start, $stop, $ie) {
  $direction: unquote($direction);
  $webkitGradientDirection: null;
  $linearGradientDirection: null;
  @if($direction == left or $direction == horizontal) {
    $webkitGradientDirection: linear, left top, right top;
    $linearGradientDirection: to right;
  } @else if($direction == top or $direction == vertical) {
    $webkitGradientDirection: linear, left top, left bottom;
    $linearGradientDirection: to bottom;
  } @else if($direction == left top) {
    $direction: -45deg;
    $webkitGradientDirection: linear, left top, right bottom;
    $linearGradientDirection: 135deg;
  } @else if($direction == left bottom) {
    $direction: 45deg;
    $webkitGradientDirection: linear, left bottom, right top;
    $linearGradientDirection: $direction;
  }
  background: nth($start, 1);
  background-image: -moz-linear-gradient($direction, $start, $stop);
  background-image: -webkit-gradient($webkitGradientDirection, color-stop(nth($start, 1), nth($start, 2)), color-stop(nth($stop, 1), nth($stop, 2)));
  background-image: -webkit-linear-gradient($direction, $start, $stop);
  background-image: -o-linear-gradient($direction, $start, $stop);
  background-image: -ms-linear-gradient($direction, $start, $stop);
  background-image: linear-gradient($linearGradientDirection, $start, $stop);
  @if($ie == true) {
    @include filter-gradient(nth($start, 1), nth($stop, 1), vertical);
  }
}

// ---------- FUNCTION DEPENDENCIES

// addresses https://github.com/nex3/sass/issues/533
// number strip-units ( number $number )
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Converts a number from 0 to 100 to the English word
// string numToString ( number $int )
@function numToString($int) {
  // set up lists
  $ones: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine";
  $teens: "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen";
  $tens: "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety";

  $int: abs($int); // no nonnegative numbers
  $number: "";
  $temp: $int / 10;
  $temp: floor($temp);
  @if($int >= 1 and $int <= 100) {
    @if($temp < 1) { // it's a one!
      $number: nth($ones, $int % 10);
    }
    @if($temp == 1) { // in the teen range
      @if($int % 10 == 0) {
        $number: "ten";
      } @else {
        $number: nth($teens, $int % 10);
      }
    }
    @if($temp >= 2 and $temp <= 9) { // more than our teens
      @if($int % 10 == 0) {
        // means it's a number evenly divisible by 10
        $number: nth($tens, $int / 10);
      } @else {
        $number: "#{nth($tens, floor($int / 10))}-#{nth($ones, $int % 10)}";
      }
    }
    @if($temp == 10) { // this is the end...
      $number: "one-hundred";
    }
  } @else {
    $number: "Invalid parameter passed. Number must be between 1 and 100."
  }
  @return $number;
}
